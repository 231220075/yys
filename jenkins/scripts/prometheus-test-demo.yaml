apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: prometheus-test-demo
  name: prometheus-test-demo
  namespace: {NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-test-demo
  template:
    metadata:
      annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8998"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
      labels:
        app: prometheus-test-demo
    spec:
      initContainers:
      - name: wait-for-redis
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          until nc -z redis-service.{NAMESPACE}.svc.cluster.local 6379; do
            echo "Waiting for Redis to be ready..."
            sleep 2
          done
          echo "Redis is ready!"
      containers:
        - image: 172.22.83.19:30003/nju08/prometheus-test-demo:{VERSION}
          name: prometheus-test-demo
          ports:
          - containerPort: 8998
          env:
          - name: REDIS_HOST
            value: "redis-service.{NAMESPACE}.svc.cluster.local"
          - name: REDIS_PORT
            value: "6379"
          resources:
            requests:
              memory: "128Mi"    
              cpu: "100m"        
            limits:
              memory: "512Mi"    
              cpu: "500m"        
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8998
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8998
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: {NAMESPACE}
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        args:
        - redis-server
        - --appendonly
        - "yes"
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: {NAMESPACE}
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-test-demo
  labels:
    app: prometheus-test-demo
  namespace: {NAMESPACE}
spec:
  type: NodePort
  selector:
    app: prometheus-test-demo
  ports:
    - name: management-port
      protocol: TCP
      port: 8998
      targetPort: 8998
