pipeline {
    agent any
    
    environment {
        HARBOR_REGISTRY = '172.22.83.19:30003'
        IMAGE_NAME = 'nju08/prometheus-test-demo'
        GIT_REPO = 'https://gitee.com/nju231220075_1/yys.git'
        NAMESPACE = 'nju08'
        HARBOR_USER = 'nju08'
        BUILD_TAG = "${BUILD_NUMBER}"
    }
    
    parameters {
        string(name: 'HARBOR_PASS', defaultValue: '', description: 'Harbor login password')
    }
    
    stages {
        stage('Clone Code') {
            steps {
                echo "üîÑ 1. Git Clone Code"
                script {
                    try {
                        checkout scm
                    } catch (Exception e) {
                        error "Git clone failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                echo "üî® 2. Maven Build"
                script {
                    try {
                        sh 'mvn clean package -DskipTests'
                    } catch (Exception e) {
                        error "Maven build failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo "üê≥ 3. Docker Image Build"
                script {
                    try {
                        sh """
                            docker build -t ${IMAGE_NAME}:${BUILD_TAG} .
                            docker tag ${IMAGE_NAME}:${BUILD_TAG} ${IMAGE_NAME}:latest
                        """
                    } catch (Exception e) {
                        error "Docker build failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Push to Harbor') {
            when {
                not { 
                    anyOf {
                        params.HARBOR_PASS == ''
                        params.HARBOR_PASS == null
                    }
                }
            }
            steps {
                echo "üì§ 4. Push to Harbor Registry"
                script {
                    try {
                        sh """
                            echo '${params.HARBOR_PASS}' | docker login ${HARBOR_REGISTRY} -u ${HARBOR_USER} --password-stdin
                            docker tag ${IMAGE_NAME}:${BUILD_TAG} ${HARBOR_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}
                            docker tag ${IMAGE_NAME}:${BUILD_TAG} ${HARBOR_REGISTRY}/${IMAGE_NAME}:latest
                            docker push ${HARBOR_REGISTRY}/${IMAGE_NAME}:${BUILD_TAG}
                            docker push ${HARBOR_REGISTRY}/${IMAGE_NAME}:latest
                        """
                    } catch (Exception e) {
                        echo "Harbor push failed, continuing with local image: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                echo "üöÄ 5. Deploy to Kubernetes"
                script {
                    try {
                        sh """
                            # ÂàõÂª∫ÂëΩÂêçÁ©∫Èó¥ÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®Ôºâ
                            kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            
                            # Êõ¥Êñ∞ÈïúÂÉèÊ†áÁ≠æ
                            sed -i 's|your-docker-registry/nju08:latest|${IMAGE_NAME}:${BUILD_TAG}|g' k8s/deployment.yaml
                            
                            # ÈÉ®ÁΩ≤Â∫îÁî®
                            kubectl apply -f k8s/ -n ${NAMESPACE}
                            
                            # Á≠âÂæÖÈÉ®ÁΩ≤ÂÆåÊàê
                            kubectl rollout status deployment/nju08-deployment -n ${NAMESPACE} --timeout=300s
                        """
                    } catch (Exception e) {
                        error "Kubernetes deployment failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                echo "‚úÖ 6. Verify Deployment"
                script {
                    try {
                        sh """
                            kubectl get pods -l app=nju08 -n ${NAMESPACE}
                            kubectl get svc -l app=nju08 -n ${NAMESPACE}
                        """
                    } catch (Exception e) {
                        echo "Verification failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "üîÑ Pipeline execution completed."
        }
        success {
            echo "‚úÖ Pipeline succeeded! NJU08 application deployed successfully."
        }
        failure {
            echo "‚ùå Pipeline failed! Please check the logs for details."
        }
        cleanup {
            script {
                try {
                    sh """
                        # Ê∏ÖÁêÜÊú¨Âú∞ÈïúÂÉèÔºà‰øùÁïôÊúÄÊñ∞ÁöÑÔºâ
                        docker image prune -f
                    """
                } catch (Exception e) {
                    echo "Image cleanup failed: ${e.getMessage()}"
                }
            }
        }
    }
}
